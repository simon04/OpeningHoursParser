/*
 */


plugins {
    id "ca.coglinc.javacc" version "2.3.1"
    id "com.jfrog.bintray" version "1.8.4"
    id "org.sonarqube" version "2.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "jacoco"

version = '0.21.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/')
    javaccSourcePath = project.buildDir.absolutePath + '/generated/javacc/'
    javaccSource = file(javaccSourcePath)
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

eclipse {
    classpath {
        file {
            beforeMerged { classpath ->
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(javaccSourcePath, "bin"))
            }
        }
    }
}

idea.module {
    sourceDirs = [javaccSource, mainSource]
}
ideaModule.dependsOn compileJavacc

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccSource,mainSource
}

compileTestJava {
    source javaccSource,mainSource,testSource
}

javadoc {
    source mainSource, testSource
    exclude '**/*.jj'
}

task sourcesJar(type: Jar) {
    from mainSource, testSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    //	options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/main/"
        property "sonar.jacoco.reportPaths","build/jacoco/test.exec"
    }
}

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole([\\:/])OpeningHoursParser([\\:/])([0-9\\.]+)', replace:"ch.poole\\1OpeningHoursParser\\2${version}", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

task updateTranslations(type: Exec) {
    if (OperatingSystem.isWindows()) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'translation'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

// test input may change and require rerunning the tests
test.inputs.files("test-data/oh.txt")

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'ch.poole'
            artifactId 'OpeningHoursParser'
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'osm'
        name = 'OpeningHoursParser'
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/simonpoole/OpeningHoursParser.git'
        version {
            name = "${project.version}"
            released  = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = System.getenv('BINTRAY_PASSPHRASE')
            }
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.jetbrains:annotations:15.0'
    testCompile 'junit:junit:4.12'
}

